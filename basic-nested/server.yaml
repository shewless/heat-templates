heat_template_version: 2016-04-08

description: >


  HOT template to create standard setup.

  We have 1 Instance:

  * Linux(Ubuntu) as a server


  We want to wire them as:

     -------|ctrl_subnet|------------- Control Network (with Internet access via router_i0)
         |
        ---
        | |
        |U|
        |B|
        |U|
        |N|
        |T|
        |U|
        | |
        ---

parameters:
  ssh_key:
    type: string
    label: "Your SSH keypair name (pre-create please!)"
    description: |
        If you have not created your key, please go to
        Project/Compute/Access & Security, and either import
        one or create one. If you create it, make sure you keep
        the downloaded file (as you don't get a second chance)
    default: default

  public_network:
    type: string
    label: Public External Network
    description: Public Network with Floating IP addresses
    default: "ext-net"

  device_flavor:
    type: string
    label: "Flavour (default 'm1.small')"
    description: "Flavour"
    default: m1.small

  device_image:
    type: string
    label: "Linux Server Image"
    description: "Image to load"
    default: "Ubuntu 16.04.1 64-bit"

  device_count:
    type: number
    label: "Auxiliary device count"
    description: "Auxiliary device count"
    default: "0"

resources:
  rtr:
    type: OS::Neutron::Router
    properties:
      admin_state_up: True
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-rtr' } }
      external_gateway_info:
        network: { get_param: public_network }

  router_i0:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: rtr }
      subnet: { get_resource: ctrl_subnet }

  basic_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-basic-rules' } }
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22

  data_net:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-data' } }
      port_security_enabled: False

  data_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-data' } }
      network: { get_resource: data_net }
      enable_dhcp: False
      cidr: 172.20.0.0/16
      gateway_ip: null
      allocation_pools:
        - start: 172.20.0.10
          end: 172.20.0.254

  ctrl_net:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-control' } }

  ctrl_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-control' } }
      dns_nameservers: [10.128.0.25, 10.128.0.26]
      network: { get_resource: ctrl_net }
      enable_dhcp: True
      cidr: 172.16.1.0/24
      gateway_ip: 172.16.1.1
      allocation_pools:
        - start: 172.16.1.10
          end: 172.16.1.254

# So the first device doesn't have an index in the name:
  device_group:
    type: OS::Heat::ResourceGroup
    depends_on: [router_i0, ctrl_subnet, data_subnet]
    properties:
      count: 1
      resource_def: 
        type: ./nested/device.yaml
        properties:
          index: ""
          stack_name: { get_param: 'OS::stack_name' }
          ssh_key: { get_param: ssh_key }
          public_network: { get_param: public_network }
          flavor: { get_param: device_flavor }
          image: { get_param: device_image }
          ctrl_net: { get_resource: ctrl_net }
          data_net: { get_resource: data_net }
          data_netmask: "255.255.0.0" 
          security_group: { get_resource: basic_security_group }
 
  devices_group:
    type: OS::Heat::ResourceGroup
    depends_on: [router_i0, ctrl_subnet, data_subnet]
    properties:
      count: { get_param: device_count }
      resource_def: 
        type: ./nested/device.yaml
        properties:
          index: "%index%"
          stack_name: { get_param: 'OS::stack_name' }
          ssh_key: { get_param: ssh_key }
          public_network: { get_param: public_network }
          flavor: { get_param: device_flavor }
          image: { get_param: device_image }
          ctrl_net: { get_resource: ctrl_net }
          data_net: { get_resource: data_net }
          data_netmask: "255.255.0.0" 
          security_group: { get_resource: basic_security_group }

outputs:
  device_ips:
    description: "Device IPs names"
    value: { list_join: [', ', { get_attr: [device_group, server_name] }, { get_attr: [devices_group, server_name] }] }
