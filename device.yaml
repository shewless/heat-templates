heat_template_version: 2016-04-08

parameters:
  ssh_key:
    type: string
    label: "Your SSH keypair name (pre-create please!)"
    description: |
        If you have not created your key, please go to
        Project/Compute/Access & Security, and either import
        one or create one. If you create it, make sure you keep
        the downloaded file (as you don't get a second chance)
    default: "default"

  public_network:
    type: string
    label: Public External Network
    description: Public Network with Floating IP addresses
    default: "external_network"

  flavor:
    type: string
    label: "Flavour (default 'MPE-TEST')"
    description: "Flavour"
    default: "MPE-TEST"

  image:
    type: string
    label: "Server Image"
    description: "Image to load"
    default: "focal-server-cloudimg-amd64"

resources:
  rtr:
    type: OS::Neutron::Router
    properties:
      admin_state_up: True
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-rtr' } }
      external_gateway_info:
        network: { get_param: public_network }

  router_i0:
    type: OS::Neutron::RouterInterface
    properties:
      router: { get_resource: rtr }
      subnet: { get_resource: ctrl_subnet }

  basic_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-basic-rules' } }
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22

  data_net:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-data' } }
      port_security_enabled: False

  data_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-data' } }
      network: { get_resource: data_net }
      enable_dhcp: False
      cidr: 172.20.0.0/16
      gateway_ip: null
      allocation_pools:
        - start: 172.20.0.10
          end: 172.20.0.254

  ctrl_net:
    type: OS::Neutron::Net
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-control' } }

  ctrl_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name-control' } }
      dns_nameservers: [10.128.0.25, 10.128.0.26]
      network: { get_resource: ctrl_net }
      enable_dhcp: True
      cidr: 172.16.1.0/24
      gateway_ip: 172.16.1.1
      allocation_pools:
        - start: 172.16.1.10
          end: 172.16.1.254

  ctrl_port:
    type: OS::Neutron::Port
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: 'ctrl-port-$stack_name' } }
      network: { get_resource: ctrl_net }
      security_groups: 
        - { get_resource: basic_security_group }
  data_port:
    type: OS::Neutron::Port
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: 'data-port-$stack_name' } } 
      network: { get_resource: data_net }
  server:
    type: OS::Nova::Server
    properties:
      name: { str_replace: { params: { $stack_name: { get_param: 'OS::stack_name' } }, template: '$stack_name' } }
      key_name: { get_param: 'ssh_key' }
      image: { get_param: 'image' }
      flavor: { get_param: 'flavor' } 
      networks:
        - port: { get_resource: ctrl_port }
        - port: { get_resource: data_port }
      user_data_format: RAW
      user_data: |
        #cloud-config
        system_info:
          default_user:
            name: "cloud"
            sudo: ALL=(ALL) NOPASSWD:ALL
        chpasswd:
          list: |
            root:cloud
            cloud:cloud
          expire: False

  floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_resource: ctrl_port }

outputs:
  server_ip:
    description: "Floating IP of server"
    value: { get_attr: [floating, floating_ip_address] }

